<html>
<head>
<script>
// 65.41 Hz is a C2 note.
var c_2 = 65.41;
var test_frequencies = [];
for (var i = 0; i < 30; i++)
{
	var note = c_2 * Math.pow(2, i / 12);
	var above = note * Math.pow(2, 1 / 48);
	var below = note * Math.pow(2, -1 / 48);
	test_frequencies = test_frequencies.concat([ below, note, above ]);
}

window.addEventListener
(
	"load",
	function()
	{
		navigator.webkitGetUserMedia({ "audio": true }, use_stream, function() {});

		var fourier_worker = new Worker("fft.js");
		var audio_context = new AudioContext();
		var analyzer = audio_context.createAnalyser();
		var recording = true;

		function use_stream(stream)
		{
			var microphone = audio_context.createMediaStreamSource(stream);
			analyzer.fftSize = 2048;
			microphone.connect(analyzer);
			loop();
		}

		function loop()
		{
			if (!recording)
				return;

			var data = new Float32Array(analyzer.fftSize);
			analyzer.getFloatTimeDomainData(data);

			fourier_worker.postMessage
			(
				{
					"timeseries": Array.prototype.slice.call(data),
					"test_frequencies": test_frequencies,
					"sample_rate": audio_context.sampleRate
				}
			);
		}

		document.getElementById("stop").addEventListener
		(
			"click",
			function()
			{
				recording = !recording;
				loop();
			}
		);

		fourier_worker.addEventListener("message", interpret_fourier_result);

		var e_note = 82.41; // Hz
		var notes = [ "E", "F", "F#", "G", "G#", "A", "A#", "B", "C", "C#", "D", "D#" ];
		function interpret_fourier_result(event)
		{
			var timeseries = event.data.timeseries;
			var frequency_amplitudes = event.data.frequency_amplitudes;
			var magnitudes = frequency_amplitudes.map(function(z) { return z[0] * z[0] + z[1] * z[1]; });
			//console.log(magnitudes);

			var average = magnitudes.reduce(function(a, b) { return a + b; }, 0) / magnitudes.length;
			var maximum_index = -1;
			var maximum_magnitude = 0;
			for (var i = 0; i < magnitudes.length; i++)
			{
				if (magnitudes[i] <= maximum_magnitude)
					continue;

				maximum_index = i;
				maximum_magnitude = magnitudes[i];
			}

			// Adding one to the index because we cut off the zero-frequency mode.
			var dominant_frequency = test_frequencies[maximum_index];
			var semitones_up = 12 * Math.log(dominant_frequency / e_note) / Math.log(2);

			var note_index = Math.round(semitones_up) % 12;
			if (note_index < 0)
				note_index += 12;

			var note_name = notes[note_index];
			var closest_named_frequency = e_note * Math.pow(2, Math.round(semitones_up) / 12);
			var confidence = maximum_magnitude / average;
			var confidence_threshold = 10; // empirical, arbitrary.
			if (confidence > confidence_threshold)
				console.log("%s. peak/average = %f. freq = %f, closest to %f", note_name, maximum_magnitude / average, dominant_frequency, closest_named_frequency);

			loop();
		}
	}
);
</script>
</head>

<body>
<button id="stop">stop</button>
</body>
</html>
